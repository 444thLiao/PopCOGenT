from snakemake.utils import R
import pandas as pd

configfile: "config.yaml"

#WILDCARDS = glob_wildcards("input/genomes/{organism}/{name}.fasta")

def get_strains(wildcards):
    df = pd.read_csv("input/predicted_clusters/%s_0.000355362.txt.cluster.tab.txt" % wildcards.organism,
                     sep="\t")
    strains = list(df.groupby("Clonal_complex").first()["Strain"])
    return strains

localrules: all, clean, core_genes

rule all:
    input:
        "output/Ruminococcus/master_presence_absence.csv",
        "output/Ruminococcus/Ruminococcus.orfs.csv",
        "output/Ruminococcus/Ruminococcus.annotations.csv"

localrules:
    target, clean

rule run_prodigal:
    input:
        "input/genomes/{organism}/{name}.fasta"
    output:
        faa = "output/{organism}/orfs/{name}_cds_prod.faa",
        fna = "output/{organism}/orfs/{name}_cds_prod.fna"
    shell:
        "{config[prodigal_path]} -i {input} -d {output.fna} -a {output.faa}"

rule clean:
    input:
        "output/{organism}/orfs/{name}_cds_prod.faa"
    output:
        "proc/{organism}/clean_orfs/{name}_cds_prod.faa"
    shell:
        "sed 's/*//g' {input} > {output}"

rule annotate:
    input:
        "proc/{organism}/clean_orfs/{name}_cds_prod.faa"
    output:
        "output/{organism}/annotations/{name}_cds_prod.faa.tsv"
    params:
        output_annotation_directory = "output/{organism}/annotations",
        interproscan_tempdir = "tmp/temp_{organism}/interproscan"
    shell:
        'module load engaging/python/2.7.10; module load engaging/jdk/1.8.0_25; {config[interproscan_path]} -f gff3 -f tsv -f html -f xml -iprlookup -goterms -pathways -d {params[output_annotation_directory]} --tempdir {params[interproscan_tempdir]} -i {input};'

rule orfs_to_fasta_db:
    input:
        lambda wildcards: ["output/%s/orfs/%s_cds_prod.%s" % (wildcards.organism, name, wildcards.extension) for name in get_strains(wildcards)]
    output:
        "proc/{organism}/concatenated_orfs.{extension}"
    shell:  
        "cat {input} > {output}"

rule parse_orfs:
    input:
        fasta = "proc/{organism}/concatenated_orfs.fna"
    output:
        csv = "output/{organism}/{organism}.orfs.csv"
    script:
        "parse_orfs.py"

rule run_mmseqs:
    input:
        "proc/{organism}/concatenated_orfs.faa"
    output:
        mmseqs_db = "proc/{organism}/clusters/DB",
        clusters = "proc/{organism}/clusters/clu"
    threads:
        8
    shell:
        """
        mkdir -p ./tmp/tmp_{wildcards.organism}/mmseqs;
        rm -rf ./tmp/tmp_{wildcards.organism}/mmseqs/*;
        {config[mmseqs_path]} createdb {input} {output.mmseqs_db};
        {config[mmseqs_path]} cluster {output.mmseqs_db} {output.clusters} ./tmp/tmp_{wildcards.organism}/mmseqs --min-seq-id 0.50 --max-seqs 100000 -c 0.8;
        """

rule clusters_to_tsv:
    input:
        mmseqs_db = "proc/{organism}/clusters/DB",
        clusters = "proc/{organism}/clusters/clu"
    output:
        clusters = "proc/{organism}/clusters/clusters.tsv"
    shell:
        "{config[mmseqs_path]} createtsv {input.mmseqs_db} {input.mmseqs_db} {input.clusters} {output}"

rule cluster_tsv_to_tidy:
    input:
        clusters = "proc/{organism}/clusters/clusters.tsv"
    output:
        presence_absence_long = "output/{organism}/master_presence_absence.csv",
    run:
        R("""
        .libPaths(.libPaths()[2])
        library(tidyverse)
        gene_df <- read.csv("{input.clusters}",sep="\t", header=FALSE)
        gene_df <- gene_df[1:2]
        colnames(gene_df) <- c("cluster","member")

        presence_absence <- gene_df %>%
            extract(member, c("fasta_id", "orf"), "(.*)_([[^_]]+_[[:digit:]]+)$", remove=FALSE) %>%
            select(fasta_id, orf, member, cluster)

        write_csv(presence_absence, path="{output.presence_absence_long}")
        """)

rule combine_annotations:
    input:
        lambda wildcards: ["output/%s/annotations/%s_cds_prod.faa.tsv" % (wildcards.organism, name) for name in get_strains(wildcards)]
    output:
        strain_dataframe = "output/{organism}/{organism}.annotations.csv"
    script:
        "scripts/all_annotations.R"


